

   Column level constraint
       Applied when column is mentioned or declared.Column level constraint
       is not mandatory to write when we are writing the constraint and
       constraint is just dependent on one column
         CREATE TABLE project(
           projectid VARCHAR2(5) CONSTRAINT project_id_pk PRIMARY KEY,
           description VARCHAR(20) NOT NULL
       );

       CREATE TABLE employee(
         empid VARCHAR2(5) PRIMARY KEY,
         empname VARCHAR2(20) NOT NULL,
         desig VARCHAR2(20) CHECK (desig IN('Mgr','AsstMgr','VP')),
         dept VARCHAR2(20) CHECK (dept IN('Sales','Mkt','HR)),
         basic INTEGER check (basic>=10000 AND basic<=30000)
         )


  -- In the above SQL statement we have applied column level 
     constraint.   
   

   Table level constraint
     When the constraint is applied after the declaration of the column
     CREATE TABLE project(
           projectid VARCHAR2(5),
           description VARCHAR(20) NOT NULL,
           CONSTRAINT project_id_pk PRIMARY KEY(projectid)
         );

     Table level constraint becomes mandatory when multiple columns are involved in applying a 
     constraint example , composite primary key. Composite primary key cannot be applied at a 
     column level. It will be always at table level.

     CREATE TABLE result(
        empid VARCHAR2(5) PRIMARY KEY,
        subjectid VARCHAR2(5) PRIMARY KEY,
        score INTEGER);

   -- So in the above SQL statement , it will be considered as two primary keys and which is not
      allowed 
    
       CREATE TABLE result(
        empid VARCHAR2(5),
        subjectid VARCHAR2(5),
        score INTEGER,
        CONSTRAINT result_empid_Subjectid_pk PRIMARY KEY(empid,subejectid)
        );
       
        CREATE TABLE employee(
         id VARCHAR2(5),
         name VARCHAR2(20),
         basic INTEGER,
         hra INTEGER,
         CONSTRAINT employee_basic_hra_chk CHECK (hra<basic)
         )
   -- In the above SQL statement we are applying check constraint which is involving two attributes or
      columns which are hra and basic. So here the check constraint cannot be applied at column level
      It needs to be applied at table level only.
  -- NOT NULL is a constraint which is applied on COLUMN level only.
-------------------------------------------------------------------------------------

       Employees are working on multiple projects
 
      Project
      projid  description  startdate  enddate

     
      Employee
      empid   name  projid

      
      CREATE TABLE project (
        projid INTEGER PRIMARY KEY,
        description VARCHAR2(20) NOT NULL,
        startdate DATE NOT NULL,
        enddate   DATE
       );
 
       CREATE TABLE employee(
        empid INTEGER PRIMARY KEY,
        name VARCHAR2(20) NOT NULL,
        projid INTEGER);

  PROJECT
  PROJID    DESCRIPTION  STARTDATE      ENDDATE
  P0001        Banking       12-Jan-1990   NULL
  P0002        Insurance     15-Feb-2020   NULL

  EMPLOYEE 
  EMPID    NAME   PROJID    
  E0001    Ramesh  P0001
  E0002    Rohit   P0005

In the above case P0005 is accepted in the employee table though we dont have the P0005 projid in
the project table. This is happening because we have not related the project table with the employee table.


     
      CREATE TABLE project (
        projid INTEGER PRIMARY KEY,
        description VARCHAR2(20) NOT NULL,
        startdate DATE NOT NULL,
        enddate   DATE
       );
 
       CREATE TABLE employee(
        empid INTEGER PRIMARY KEY,
        name VARCHAR2(20) NOT NULL,
        projid INTEGER CONSTRAINT employee_projid_fk REFERENCES project(projid));

-- The projid in employee table is a foreign key and projid in project table is a primary key.
   So with the help of foreign key , we are setting a relationship between project table and
   the employee table.
 PROJECT
  PROJID    DESCRIPTION  STARTDATE      ENDDATE
  P0001        Banking       12-Jan-1990   NULL
  P0002        Insurance     15-Feb-2020   NULL

  EMPLOYEE 
  EMPID    NAME   PROJID    
  E0001    Ramesh  P0001
  E0002    Rohit   P0005
  So while inserting the record of E0002 in employee table, we will get error because it will be
  checked whether we have P0005 in the project table. As it is not there , it wont accept the record.

---------------------------------------------------------------------------------------------
  CREATE TABLE employeedetails(
         empid VARCHAR2(5) PRIMARY KEY,
         empname VARCHAR2(20) NOT NULL,
         desig VARCHAR2(20) CHECK (desig IN('Mgr','AsstMgr','VP')),
         dept VARCHAR2(20) CHECK (dept IN('Sales','Mkt','HR')),
         basic INTEGER check (basic>=10000 AND basic<=30000)
         );


   INSERT INTO employeedetails VALUES('E0001','Rajesh','Mgr','Sales',30000);
   INSERT INTO employeedetails VALUES('E0002','Raj','Mgr','Sales',29000);
   INSERT INTO employeedetails VALUES('E0003','Rohit','AsstMgr','Sales',20000);

CREATE TABLE backup(
         empid VARCHAR2(5) PRIMARY KEY,
         empname VARCHAR2(20) NOT NULL,
         desig VARCHAR2(20) CHECK (desig IN('Mgr','AsstMgr','VP')),
         dept VARCHAR2(20) CHECK (dept IN('Sales','Mkt','HR')),
         basic INTEGER check (basic>=10000 AND basic<=30000)
          );

INSERT INTO backup SELECT * FROM employeedetails WHERE desig='Mgr';
-- The above statement will store the records of managers from employeedetails table to the backup table.
INSERT INTO backup SELECT * FROM employeedetails; 
-- The above statement will store all the records  from employeedetails table to the backup table.

CREATE TABLE backup(
         empid VARCHAR2(5) PRIMARY KEY,
         empname VARCHAR2(20) NOT NULL,
         dept VARCHAR2(20) CHECK (dept IN('Sales','Mkt','HR')),
         basic INTEGER check (basic>=10000 AND basic<=30000)


          );

INSERT INTO backup SELECT empid,empname,dept,basic FROM employeedetails WHERE desig='Mgr';



CREATE TABLE backup(
         empid VARCHAR2(5) PRIMARY KEY,
         empname VARCHAR2(20) NOT NULL,
         desig VARCHAR2(20) CHECK (desig IN('Mgr','AsstMgr','VP')),
         dept VARCHAR2(20) CHECK (dept IN('Sales','Mkt','HR')),
         basic INTEGER check (basic>=10000 AND basic<=30000)
          );

INSERT INTO backup(empid,empname) SELECT empid,empname from employeedetails WHERE desig='Mgr';

--------------------------------------------------------------------------------------------------

 CREATE TABLE employeedetails(
         empid VARCHAR2(5) PRIMARY KEY,
         empname VARCHAR2(20),
         desig VARCHAR2(20) CHECK (desig IN('Mgr','AsstMgr','VP')),
         dept VARCHAR2(20) CHECK (dept IN('Sales','Mkt','HR')),
         basic INTEGER check (basic>=10000 AND basic<=30000)
         );

 INSERT INTO employeedetails VALUES('E0001','Rajesh','Sales',30000);
-- I will get error as not enough values
INSERT INTO employeedetails(empid,desig,dept,basic) VALUES('E0001','Mgr','Sales',30000);
-- So if we want to skip any column while inserting , then mention the column names after the 
table name in which you want to insert data.
INSERT INTO employeedetails(empid,desig,dept,basic) VALUES('E0001','Mgr','Sales','Hello');
-- The above statement will give error because basic is having the datatype as integer but while
inserting the data, we inserted a string.
-------------------
-- String data are case sensitive in oracle
 INSERT INTO employeedetails VALUES('E0001','eename='rajesh';
  -- It wont show any of the rows as we are writing r in lowercase but in the table while storing 
  we stored R in uppercase for rajesh.  



